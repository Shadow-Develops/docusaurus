"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[6556],{8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var r=n(6540);const s={},i=r.createContext(s);function o(e){const t=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:t},e.children)}},9702:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"shadowStore/api/verify","title":"Verify (License System)","description":"If you own and use the license system within Shadow Store, then you can use this api route.","source":"@site/docs/shadowStore/api/verify.md","sourceDirName":"shadowStore/api","slug":"/shadowStore/api/verify","permalink":"/docs/shadowStore/api/verify","draft":false,"unlisted":false,"editUrl":"https://github.com/Shadow-Develops/docusaurus/tree/main/docs/shadowStore/api/verify.md","tags":[],"version":"current","lastUpdatedAt":1759879984000,"sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"shadowStore","previous":{"title":"Release Version","permalink":"/docs/shadowStore/api/version"},"next":{"title":"Addons","permalink":"/docs/shadowStore/addons/"}}');var s=n(4848),i=n(8453);const o={sidebar_position:2},a="Verify (License System)",c={},l=[{value:"Responses",id:"responses",level:2},{value:"Success",id:"success",level:3},{value:"Failure",id:"failure",level:3},{value:"Examples",id:"examples",level:2},{value:"NodeJs Fetch",id:"nodejs-fetch",level:3},{value:"NodeJs Native HTTP",id:"nodejs-native-http",level:3},{value:"LUA",id:"lua",level:3},{value:"PHP",id:"php",level:3},{value:"Python using http.client",id:"python-using-httpclient",level:3},{value:"Python using requests",id:"python-using-requests",level:3},{value:"Powershell",id:"powershell",level:3}];function d(e){const t={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"verify-license-system",children:"Verify (License System)"})}),"\n",(0,s.jsxs)(t.p,{children:["If you own and use the ",(0,s.jsx)(t.a,{href:"https://shadowdevs.com/store/licensesystem",children:"license system"})," within Shadow Store, then you can use this api route."]}),"\n",(0,s.jsxs)(t.p,{children:["The verification API returns data about the license and product based on the input license key via the request header.",(0,s.jsx)(t.br,{}),"\nYou will be using a POST method to make a request to ",(0,s.jsx)(t.code,{children:"/api/verify"})," and putting the license key inside the header."]}),"\n",(0,s.jsx)(t.h2,{id:"responses",children:"Responses"}),"\n",(0,s.jsx)(t.h3,{id:"success",children:"Success"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\r\n\t"success": true,\r\n\t"data": {\r\n\t\t"id": 1,\r\n\t\t"user": "291528890931871744",\r\n\t\t"product": { "id": 1, "name": "Product" }\r\n\t}\r\n}\n'})}),"\n",(0,s.jsx)(t.h3,{id:"failure",children:"Failure"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",metastring:'title="Invalid Key"',children:'{\r\n\t"success": false,\r\n\t"msg": "Invalid Key Provided. | The key you are looking for doesn\'t exist within the database."\r\n}\n'})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",metastring:'title="Disabled"',children:'{\r\n\t"success": false,\r\n\t"msg": "Disabled Key | The key is currently disabled and unable to be authorized."\r\n}\n'})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",metastring:'title="Wrong IP"',children:'{\r\n\t"success": false,\r\n\t"msg": "Mismatch IP | The provided IP doesn\'t match the IP linked to the key."\r\n}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(t.h3,{id:"nodejs-fetch",children:"NodeJs Fetch"}),"\n",(0,s.jsxs)(t.p,{children:["Please note that the ",(0,s.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API",children:"Fetch API"})," was added to native Node.Js in version 18; however, you can use the NPM package ",(0,s.jsx)(t.a,{href:"https://www.npmjs.com/package/node-fetch",children:"node-fetch"})," for older versions."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"const response = await fetch('https://example.com/api/verify', {\r\n\tmethod: 'POST',\r\n\theaders: {\r\n\t\t'content-type': 'application/json',\r\n\t\tkey: 'LICENSE_KEY', // Should be a string\r\n\t},\r\n\tsignal: AbortSignal.timeout(10000), // 10 second timeout\r\n});\r\n\r\nif (!response.ok) {\r\n\tconsole.log(\r\n\t\t`HTTP ${response.status}: ${response.statusText || 'Internal Server Error'}`\r\n\t);\r\n\tprocess.exit(); // Stop application from running\r\n}\r\nconst licenseData = await response.json();\r\n\r\nif (!licenseData.success) {\r\n\tconsole.log(`Invalid Site License Key | Error Message:\\n${licenseData.msg}`);\r\n\tprocess.exit();\r\n}\r\nif (licenseData.data.product.id !== PRODUCT_ID) {\r\n\t// PRODUCT_ID must be a number, not a string!\r\n\tconsole.log(\r\n\t\t`Invalid Site License Key | Error Message: Using license key for a different product.`\r\n\t);\r\n\tprocess.exit();\r\n}\n"})}),"\n",(0,s.jsx)(t.h3,{id:"nodejs-native-http",children:"NodeJs Native HTTP"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.em,{children:"Note: Using fetch is recommended over this for applications that allow it!"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"const http = require('http');\r\n\r\nconst options = {\r\n\thostname: 'example.com',\r\n\tport: 443,\r\n\tpath: '/api/verify',\r\n\tmethod: 'POST',\r\n\theaders: {\r\n\t\t'content-type': 'application/json',\r\n\t\tkey: 'LICENSE_KEY', // Should be a string\r\n\t},\r\n};\r\n\r\nconst req = http.request(options, (res) => {\r\n\tlet data = '';\r\n\r\n\tres.on('data', (chunk) => {\r\n\t\tdata += chunk;\r\n\t});\r\n\r\n\tres.on('end', () => {\r\n\t\tif (res.statusCode !== 200) {\r\n\t\t\tconsole.log(\r\n\t\t\t\t`HTTP ${res.statusCode}: ${\r\n\t\t\t\t\tres.statusMessage || 'Internal Server Error'\r\n\t\t\t\t}`\r\n\t\t\t);\r\n\t\t\tprocess.exit();\r\n\t\t}\r\n\r\n\t\tconst licenseData = JSON.parse(data);\r\n\r\n\t\tif (!licenseData.success) {\r\n\t\t\tconsole.log(\r\n\t\t\t\t`Invalid Site License Key | Error Message:\\n${licenseData.msg}`\r\n\t\t\t);\r\n\t\t\tprocess.exit();\r\n\t\t}\r\n\t\tif (licenseData.data.product.id !== PRODUCT_ID) {\r\n\t\t\t// PRODUCT_ID must be a number, not a string!\r\n\t\t\tconsole.log(\r\n\t\t\t\t`Invalid Site License Key | Error Message: Using license key for a different product.`\r\n\t\t\t);\r\n\t\t\tprocess.exit();\r\n\t\t}\r\n\t});\r\n});\r\n\r\nreq.on('error', (error) => {\r\n\tconsole.error('Error:', error);\r\n\tprocess.exit();\r\n});\r\n\r\n// Add timeout of 10 seconds\r\nreq.setTimeout(10000, () => {\r\n\treq.destroy();\r\n\tconsole.log('Request timeout');\r\n\tprocess.exit();\r\n});\r\n\r\nreq.end();\n"})}),"\n",(0,s.jsx)(t.h3,{id:"lua",children:"LUA"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-lua",children:'local http = require("http")\r\nlocal https = require("https")\r\nlocal json = require("json")\r\n\r\nlocal req = https.request{\r\n\turl = "https://example.com/api/verify",\r\n\tmethod = "POST",\r\n\theaders = {\r\n\t\t["content-type"] = "application/json",\r\n\t\t["key"] = "LICENSE_KEY" -- Should be a string\r\n\t},\r\n\ttimeout = 10\r\n}\r\n\r\nlocal response_body, status_code, headers = req:send()\r\n\r\nif status_code ~= 200 then\r\n\tprint(string.format("HTTP %d: %s", status_code, "Internal Server Error"))\r\n\tos.exit()\r\nend\r\n\r\nlocal licenseData = json.decode(response_body)\r\n\r\nif not licenseData.success then\r\n\tprint(string.format("Invalid Site License Key | Error Message:\\n%s", licenseData.msg))\r\n\tos.exit()\r\nend\r\n\r\nif licenseData.data.product.id ~= PRODUCT_ID then\r\n\t-- PRODUCT_ID must be a number, not a string!\r\n\tprint("Invalid Site License Key | Error Message: Using license key for a different product.")\r\n\tos.exit()\r\nend\n'})}),"\n",(0,s.jsx)(t.h3,{id:"php",children:"PHP"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-php",children:"<?php\r\n$ch = curl_init();\r\n\r\ncurl_setopt_array($ch, [\r\n\tCURLOPT_URL => 'https://example.com/api/verify',\r\n\tCURLOPT_POST => true,\r\n\tCURLOPT_RETURNTRANSFER => true,\r\n\tCURLOPT_TIMEOUT => 10,\r\n\tCURLOPT_HTTPHEADER => [\r\n\t\t'Content-Type: application/json',\r\n\t\t'key: LICENSE_KEY' // Should be a string\r\n\t]\r\n]);\r\n\r\n$response = curl_exec($ch);\r\n$httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\r\ncurl_close($ch);\r\n\r\nif ($httpCode !== 200) {\r\n\tdie(\"HTTP $httpCode: Internal Server Error\\n\");\r\n}\r\n\r\n$licenseData = json_decode($response, true);\r\n\r\nif (!$licenseData['success']) {\r\n\tdie(\"Invalid Site License Key | Error Message:\\n\" . $licenseData['msg'] . \"\\n\");\r\n}\r\n\r\nif ($licenseData['data']['product']['id'] !== PRODUCT_ID) {\r\n\t// PRODUCT_ID must be a number, not a string!\r\n\tdie(\"Invalid Site License Key | Error Message: Using license key for a different product.\\n\");\r\n}\n"})}),"\n",(0,s.jsx)(t.h3,{id:"python-using-httpclient",children:"Python using http.client"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"import http.client\r\nimport json\r\nimport sys\r\n\r\nconn = http.client.HTTPSConnection(\"example.com\", timeout=10)\r\n\r\nheaders = {\r\n\t'content-type': 'application/json',\r\n\t'key': 'LICENSE_KEY'  # Should be a string\r\n}\r\n\r\ntry:\r\n\tconn.request(\"POST\", \"/api/verify\", headers=headers)\r\n\tresponse = conn.getresponse()\r\n\r\n\tif response.status != 200:\r\n\t\tprint(f\"HTTP {response.status}: {response.reason or 'Internal Server Error'}\")\r\n\t\tsys.exit()\r\n\r\n\tlicenseData = json.loads(response.read().decode())\r\n\r\n\tif not licenseData['success']:\r\n\t\tprint(f\"Invalid Site License Key | Error Message:\\n{licenseData['msg']}\")\r\n\t\tsys.exit()\r\n\r\n\tif licenseData['data']['product']['id'] != PRODUCT_ID:\r\n\t\t# PRODUCT_ID must be a number, not a string!\r\n\t\tprint(\"Invalid Site License Key | Error Message: Using license key for a different product.\")\r\n\t\tsys.exit()\r\n\r\nfinally:\r\n\tconn.close()\n"})}),"\n",(0,s.jsx)(t.h3,{id:"python-using-requests",children:"Python using requests"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"import requests\r\nimport sys\r\n\r\ntry:\r\n\tresponse = requests.post(\r\n\t\t'https://example.com/api/verify',\r\n\t\theaders={\r\n\t\t\t'content-type': 'application/json',\r\n\t\t\t'key': 'LICENSE_KEY'  # Should be a string\r\n\t\t},\r\n\t\ttimeout=10\r\n\t)\r\n\r\n\tif response.status_code != 200:\r\n\t\tprint(f\"HTTP {response.status_code}: {response.reason or 'Internal Server Error'}\")\r\n\t\tsys.exit()\r\n\r\n\tlicenseData = response.json()\r\n\r\n\tif not licenseData['success']:\r\n\t\tprint(f\"Invalid Site License Key | Error Message:\\n{licenseData['msg']}\")\r\n\t\tsys.exit()\r\n\r\n\tif licenseData['data']['product']['id'] != PRODUCT_ID:\r\n\t\t# PRODUCT_ID must be a number, not a string!\r\n\t\tprint(\"Invalid Site License Key | Error Message: Using license key for a different product.\")\r\n\t\tsys.exit()\r\n\r\nexcept requests.exceptions.RequestException as e:\r\n\tprint(f\"Request failed: {e}\")\r\n\tsys.exit()\n"})}),"\n",(0,s.jsx)(t.h3,{id:"powershell",children:"Powershell"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-powershell",children:"$headers = @{\r\n\t'content-type' = 'application/json'\r\n\t'key' = 'LICENSE_KEY' # Should be a string\r\n}\r\n\r\ntry {\r\n\t$response = Invoke-WebRequest -Uri 'https://example.com/api/verify' `\r\n\t\t-Method 'POST' `\r\n\t\t-Headers $headers `\r\n\t\t-TimeoutSec 10\r\n\r\n\tif ($response.StatusCode -ne 200) {\r\n\t\tWrite-Host \"HTTP $($response.StatusCode): Internal Server Error\"\r\n\t\texit\r\n\t}\r\n\r\n\t$licenseData = $response.Content | ConvertFrom-Json\r\n\r\n\tif (-not $licenseData.success) {\r\n\t\tWrite-Host \"Invalid Site License Key | Error Message:`n$($licenseData.msg)\"\r\n\t\texit\r\n\t}\r\n\r\n\tif ($licenseData.data.product.id -ne $PRODUCT_ID) {\r\n\t\t# $PRODUCT_ID must be a number, not a string!\r\n\t\tWrite-Host \"Invalid Site License Key | Error Message: Using license key for a different product.\"\r\n\t\texit\r\n\t}\r\n}\r\ncatch {\r\n\tWrite-Host \"Request failed: $_\"\r\n\texit\r\n}\n"})})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);